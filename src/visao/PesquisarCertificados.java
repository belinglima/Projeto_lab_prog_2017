package visao;

import java.sql.ResultSet;
import javax.swing.DefaultListModel;
import java.sql.*;

/**
 *
 * @author Familia-Lima
 */
public class PesquisarCertificados extends javax.swing.JFrame {

    /**
     * Creates new form PesquisarCertificados
     */
    public PesquisarCertificados() {
        initComponents();
        Atualizar.doClick();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HASH = new javax.swing.JTextField();
        Pesquisar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Sair = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaDeCertificados = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        Atualizar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        HASH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HASHActionPerformed(evt);
            }
        });
        getContentPane().add(HASH);
        HASH.setBounds(120, 160, 230, 40);

        Pesquisar.setText("PESQUISAR");
        Pesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PesquisarActionPerformed(evt);
            }
        });
        getContentPane().add(Pesquisar);
        Pesquisar.setBounds(360, 160, 100, 40);

        jLabel2.setFont(new java.awt.Font("Arial", 3, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("HASH  =");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(50, 160, 60, 40);

        jLabel3.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Pesquisa de Certificados");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(130, 100, 240, 40);

        Sair.setText("SAIR");
        Sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SairActionPerformed(evt);
            }
        });
        getContentPane().add(Sair);
        Sair.setBounds(340, 420, 120, 40);

        ListaDeCertificados.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        ListaDeCertificados.setFont(new java.awt.Font("Arial", 3, 11)); // NOI18N
        jScrollPane1.setViewportView(ListaDeCertificados);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 240, 450, 170);

        jLabel4.setFont(new java.awt.Font("Arial", 3, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("LISTA DE CERTIFICADOS GRAVADOS NO SISTEMA");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 210, 290, 20);

        Atualizar.setText("ATUALIZAR");
        Atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtualizarActionPerformed(evt);
            }
        });
        getContentPane().add(Atualizar);
        Atualizar.setBounds(10, 420, 110, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/porta.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 470, 500);

        setSize(new java.awt.Dimension(488, 532));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SairActionPerformed
        dispose();
    }//GEN-LAST:event_SairActionPerformed

    private void PesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PesquisarActionPerformed

        // efetuar conexão com o banco de dados
        BancoDeDados database = new BancoDeDados();
        database.configurar_connection("root", "", "porta");

        // receber hash md5
        String hash = HASH.getText();

        // recuperar certificados do banco
        ResultSet certificados = database.buscarCertificado(hash);

        // lista de certificados
        DefaultListModel dataModel = new DefaultListModel();

        // variáveis que guarda cada linha
        String evento = new String();
        String participante = new String();
        String horas = new String();
        String instituição = new String();

        String dataLine = new String();

        int evento_id;
        int participante_id;

        try {

            ResultSet resultadoCertificados = database.buscarCertificado(hash);

            while (resultadoCertificados.next()) {

                evento_id = resultadoCertificados.getInt("evento_id");
                participante_id = resultadoCertificados.getInt("participante_id");

                ResultSet resultadoParticipante = database.buscarParticipante(participante_id);
                ResultSet resultadoEvento = database.buscarEvento(evento_id);

                resultadoParticipante.first();
                resultadoEvento.first();

                evento = resultadoEvento.getString("nome");
                participante = resultadoParticipante.getString("nome");
                horas = resultadoEvento.getString("horas");
                instituição = resultadoEvento.getString("instituicao");

                dataLine = "<HASH:" + hash;
                dataLine += "> ";
                dataLine += evento;
                dataLine += " - ";
                dataLine += participante;
                dataLine += " - ";
                dataLine += horas;
                dataLine += " - ";
                dataModel.addElement(dataLine);

            }

            ListaDeCertificados.setModel(dataModel);
            ListaDeCertificados.repaint();

        } catch (SQLException exception) {

            System.out.println("zikou");
            System.out.println(exception.getMessage());
        }
    }//GEN-LAST:event_PesquisarActionPerformed

    private void HASHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HASHActionPerformed
        // Pesqisa de certificado
    }//GEN-LAST:event_HASHActionPerformed

    private void AtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtualizarActionPerformed
        // efetuar conexão com o banco de dados
        BancoDeDados database = new BancoDeDados();
        database.configurar_connection("root", "", "porta");

        // recuperar certificados do banco
        ResultSet certificados = database.listarCertificados();

        // lista de certificados
        DefaultListModel dataModel = new DefaultListModel();

        // variáveis que guarda cada linha
        String evento = new String();
        String participante = new String();
        String horas = new String();
        String instituição = new String();

        String dataLine = new String();

        int evento_id;
        int participante_id;
        String hash;

        try {

            ResultSet resultadoCertificados = database.listarCertificados();

            while (resultadoCertificados.next()) {

                evento_id = resultadoCertificados.getInt("evento_id");
                participante_id = resultadoCertificados.getInt("participante_id");
                hash = resultadoCertificados.getString("hash");

                ResultSet resultadoParticipante = database.buscarParticipante(participante_id);
                ResultSet resultadoEvento = database.buscarEvento(evento_id);

                resultadoParticipante.first();
                resultadoEvento.first();

                evento = resultadoEvento.getString("nome");
                participante = resultadoParticipante.getString("nome");
                horas = resultadoEvento.getString("horas");
                instituição = resultadoEvento.getString("instituicao");

                dataLine = "<HASH: "+ hash;
                dataLine += "> ";
                dataLine += evento;
                dataLine += " - ";
                dataLine += participante;
                dataLine += " - ";
                dataLine += horas;
                dataLine += " - ";
                dataModel.addElement(dataLine);

            }

            ListaDeCertificados.setModel(dataModel);
            ListaDeCertificados.repaint();

        } catch (SQLException exception) {

            System.out.println("zikou");
            System.out.println(exception.getMessage());
        }

    }//GEN-LAST:event_AtualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PesquisarCertificados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PesquisarCertificados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PesquisarCertificados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PesquisarCertificados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PesquisarCertificados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Atualizar;
    public javax.swing.JTextField HASH;
    private javax.swing.JList<String> ListaDeCertificados;
    public javax.swing.JButton Pesquisar;
    private javax.swing.JButton Sair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
